<!--
Copyright (c) 2011, Jan Vlcek
All rights reserved.

For further information see enclosed LICENSE file.
-->
<!--
The ant configuration file capable of installation and uninstallation 
of everything needed to collect the coverage data of RHN Satellite/Spacewalk
server.

Author: Jan Vlcek <xvlcek03@stud.fit.vutbr.cz>
-->
<project name="spacewalk-xmlrpc-tests" default="install" basedir=".">
  <description>
  Build file used for installation and setup of the 
  coverage part of Spacewalk XML-RPC test suite.
  </description>

  <!-- Load coverage properties -->
  <property file="${basedir}/conf/coverage.properties" />

  <!-- Define the Cobertura instrument task -->
  <taskdef name="cobertura-instrument"
           classname="net.sourceforge.cobertura.ant.InstrumentTask" />


  

  
  <!-- ##### MAIN TARGETS ##### -->

  <target name="install" depends="create-coverage-var-dir,install-java,install-python" />

  <target name="uninstall" depends="uninstall-java,uninstall-python,delete-coverage-var-dir" />




  <!-- ##### JAVA-RELATED TARGETS ##### -->

  <target name="install-java" 
          depends="backup-original-rhn-jar,instrument-java,symlink-cobertura-to-tomcat"
          description="Does needed changes to setup the Java code for tests">

    <exec executable="${service.tomcat6}">
      <arg value="stop" />
    </exec>

    <delete quiet="true">
      <fileset file="${java.rhn.jar.path}" />
    </delete>
    
    <symlink link="${java.rhn.jar.path}" resource="${java.rhn.jar.instr.path}" />

    <exec executable="${service.tomcat6}">
      <arg value="start" />
    </exec>
  </target>

  <target name="uninstall-java"
          description="Rollbacks the changes done in install"
          depends="-check-original-rhn-jar"
          if="rhn.jar.original.present">
   
    <exec executable="${service.tomcat6}">
      <arg value="stop" />
    </exec>
 
    <!-- Remove the symlink and instrumented jar -->
    <delete quiet="true">
      <fileset file="${java.rhn.jar.path}" />
      <fileset file="${java.rhn.jar.instr.path}" />
    </delete>

    <!-- Move the original jar back to its place -->
    <move file="${java.rhn.jar.backup.path}" tofile="${java.rhn.jar.path}" />

    <!-- Delete the data files -->
    <delete quiet="true">
      <fileset file="${java.cobertura.datafile.tomcat6.path}" />
      <fileset file="${java.datafile.path}" />
      <fileset file="${java.emptydatafile.path}" />
    </delete>

    <exec executable="${service.tomcat6}">
      <arg value="start" />
    </exec>
  </target>

  <target name="backup-original-rhn-jar"
          depends="-check-original-rhn-jar"
          unless="rhn.jar.original.present" >

    <copy file="${java.rhn.jar.path}" tofile="${java.rhn.jar.backup.path}" />    
  </target>

  <target name="instrument-java" 
          description="Instruments the classes of unpacked rhn.jar"
          depends="-check-instrumented-rhn-jar"
          unless="rhn.jar.instr.present" >
    
    <delete quiet="true">
      <fileset file="${cobertura.datafile}" />
    </delete>

    <!-- Make temporary directory for unpacked jar -->
    <exec executable="mktemp" outputproperty="instrument.classes.dir">
      <arg value="-d" />
    </exec>

    <unjar src="${java.rhn.jar.backup.path}" dest="${instrument.classes.dir}" />

    <cobertura-instrument todir="${instrument.classes.dir}" datafile="${java.datafile.path}">
      <!-- NOTE: asm.jar and asm-tree.jar must be explicitly loaded as they 
                 are not in /etc/ant.d/cobertura -->
      <classpath location="/usr/share/java/objectweb-asm/asm.jar" />
      <classpath location="/usr/share/java/objectweb-asm/asm-tree.jar" />

      <fileset dir="${instrument.classes.dir}">
        <include name="**/*.class" />
      </fileset>
    </cobertura-instrument>

    <jar destfile="${java.rhn.jar.instr.path}" basedir="${instrument.classes.dir}" />

    <!-- Delete the temporary directory -->
    <delete quiet="true" includeemptydirs="true">
      <fileset dir="${instrument.classes.dir}" />
    </delete>

    <!-- Backup the empty datafile -->
    <copy file="${java.datafile.path}"
          tofile="${java.emptydatafile.path}"
          overwrite="true" />

    <!-- Remove possible previous cobertura data file ... -->
    <delete quiet="true">
      <fileset file="${java.cobertura.datafile.tomcat6.path}" />
    </delete>

    <!-- ... and symlink it to our var directory -->
    <symlink link="${java.cobertura.datafile.tomcat6.path}" resource="${java.datafile.path}" />

    <!-- Finally set permissions for all to write -->
    <chmod perm="ugo+rw" file="${java.datafile.path}" />
  </target>

  <target name="symlink-cobertura-to-tomcat"
          description="Setups the Tomcat server to load Cobertura's jar"
          depends="-check-tomcat-cobertura-jar"
          unless="tomcat.cobertura.jar.present"> 
    <symlink link="/usr/share/java/tomcat6/cobertura.jar"
             resource="/usr/share/java/cobertura.jar"
             failonerror="false" />
  </target>



  
  <!-- ##### PYTHON-RELATED TARGETS -->

  <target name="install-python"
          depends="backup-python-wsgi-conf,backup-python-modpython-conf,readable-httpd-logs">
    <!-- mod_wsgi first -->

    <!-- Copy back the original conf file -->
    <copy file="${python.wsgi.conf.path}-backup"
          tofile="${python.wsgi.conf.path}" overwrite="true" />
    
    <!-- Update the PythonPath line with python lib -->
    <exec executable="sed" output="${python.wsgi.conf.path}">
      <arg value='s|^\(.*WSGIPythonPath[^"]*"\)\([^"]*\)\(".*\)$|\1\2:${python.lib.path}\3|' />
      <arg value="${python.wsgi.conf.path}" />
    </exec>

    <!-- Update the ScriptAlias /XMLRPC line with our handler -->
    <exec executable="sed" output="${python.wsgi.conf.path}">
      <arg value='s|^\(.*WSGIScriptAlias.*/XMLRPC\).*$|\1 ${python.wsgi.handler.xmlrpc.path}|' />
      <arg value="${python.wsgi.conf.path}" />
    </exec>

    <!-- mod_python second -->

    <!-- Copy back the original conf file -->
    <copy file="${python.modpython.conf.path}-backup"
          tofile="${python.modpython.conf.path}" overwrite="true" />
    
    <!-- Add the PythonPath line with python lib -->
    <exec executable="sed" output="${python.modpython.conf.path}">
      <arg value='s|^\(.*SetHandler.*\)|\1\n  PythonPath "sys.path+[&apos;${python.lib.path}&apos;]"|' />
      <arg value="${python.modpython.conf.path}" />
    </exec>

    <!-- Update the Python*Handler lines with our path to handlers -->
    <exec executable="sed" output="${python.modpython.conf.path}">
      <arg value='s|spacewalk\.server\.apacheServer|spacewalkcoverage.server.apacheServer|' />
      <arg value="${python.modpython.conf.path}" />
    </exec> 

    <!-- Delete the possibly existing data file -->
    <delete quiet="true">
      <fileset file="${python.datafile.path}" />
    </delete>

    <!-- Restart Httpd server -->
    <exec executable="${service.httpd}">
      <arg value="restart" />
    </exec>
  </target>

  <target name="uninstall-python">
    <!-- Restore configuration -->
    <move file="${python.wsgi.conf.path}-backup"
          tofile="${python.wsgi.conf.path}"
          overwrite="true" />
    <move file="${python.modpython.conf.path}-backup"
          tofile="${python.modpython.conf.path}"
          overwrite="true" />

    <!-- Delete the possibly existing data file -->
    <delete quiet="true">
      <fileset file="${python.datafile.path}" />
    </delete>

    <!-- Restart Httpd server -->
    <exec executable="${service.httpd}">
      <arg value="restart" />
    </exec>
  </target>

  <target name="backup-python-wsgi-conf"
          depends="-check-python-wsgi-conf-backup"
          unless="python.wsgi.conf.backup.present">
    <copy file="${python.wsgi.conf.path}" tofile="${python.wsgi.conf.path}-backup" />
  </target>

  <target name="backup-python-modpython-conf"
          depends="-check-python-modpython-conf-backup"
          unless="python.modpython.conf.backup.present">
    <copy file="${python.modpython.conf.path}" tofile="${python.modpython.conf.path}-backup" />
  </target>

  <target name="readable-httpd-logs"
          description="Chmods the httpd log directory to be readable by all">
    
    <!-- Make readable the directory -->
    <chmod dir="/var/log/httpd" perm="ugo+rx" />

    <!-- As well as all files inside -->
    <chmod dir="/var/log/httpd" perm="ugo+r" includes="*" />
  </target>



  
  <!-- ##### HELPER TARGETS ##### -->

  <target name="create-coverage-var-dir">
    <mkdir dir="${coverage.var.dir}" />
    <chmod dir="${coverage.var.dir}" perm="a+rwx" />
  </target>

  <target name="delete-coverage-var-dir">
    <delete quiet="true" includeemptydirs="true">
      <fileset dir="${coverage.var.dir}" />
    </delete>
  </target>

  <target name="-check-tomcat-cobertura-jar">
    <available file="/usr/share/java/tomcat6/cobertura.jar"
               property="tomcat.cobertura.jar.present" />
  </target>

  <target name="-check-instrumented-rhn-jar">
    <available file="${java.rhn.jar.instr.path}"
               property="rhn.jar.instr.present" />
  </target>

  <target name="-check-original-rhn-jar">
    <available file="${java.rhn.jar.backup.path}"
               property="rhn.jar.original.present" />
  </target>

  <target name="-check-python-wsgi-conf-backup">
    <available file="${python.wsgi.conf.path}-backup"
               property="python.wsgi.conf.backup.present" /> 
  </target>

  <target name="-check-python-modpython-conf-backup">
    <available file="${python.modpython.conf.path}-backup"
               property="python.modpython.conf.backup.present" /> 
  </target>

</project>
