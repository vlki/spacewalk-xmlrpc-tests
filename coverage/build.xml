<project name="spacewalk-xmlrpc-tests" default="install" basedir=".">
  <description>
  Build file used for installation and setup of the 
  Spacewalk's XML-RPC test suite.
  </description>




  <!-- ##### SETTINGS ##### -->

  <!-- Path to rhn.jar containing the Java application -->
  <property name="rhn.jar.path" location="/usr/share/rhn/lib/rhn.jar" />
  
  <!-- Path to the jar file after successful instrumentation -->
  <property name="rhn.jar.instr.path"
            location="/usr/share/rhn/lib/rhn.cobertura.jar" />

  <!-- Path to the original jar file -->
  <property name="rhn.jar.original.path"
            location="/usr/share/rhn/lib/rhn.original.jar" />

  <!-- Path where the Cobertura data file is stored by tomcat6 service -->
  <property name="cobertura.datafile.tomcat6.path" location="/usr/share/tomcat6/cobertura.ser" />

  <!-- Path where the Cobertura data file will be stored -->
  <property name="cobertura.datafile.path" location="/var/opt/spacewalk-xmlrpc-tests/coverage/java.coverage.datafile" />
  <property name="cobertura.emptydatafile.path" location="/var/opt/spacewalk-xmlrpc-tests/coverage/java.coverage.empty.datafile" />

  <!-- Paths to the services -->
  <property name="service.tomcat" location="/etc/init.d/tomcat6" />
  <property name="service.httpd" location="/etc/init.d/httpd" />

  <!-- Path to the real variable data directory -->
  <property name="real.coverage.var.dir" location="/opt/spacewalk-xmlrpc-tests/coverage/var" />

  <!-- Path to the Httpd's WSGI conf -->
  <property name="python.wsgi.conf.path" location="/etc/httpd/conf.d/zz-spacewalk-server-wsgi.conf" />

  <!-- Path to the Python modules needed for coverage measurement -->
  <property name="python.lib.path" location="/opt/spacewalk-xmlrpc-tests/coverage/python_lib" />

  <!-- Path to the WSGI handler of the xmlrpc requests -->
  <property name="python.wsgi.xmlrpc.handler.path" location="/opt/spacewalk-xmlrpc-tests/coverage/python_lib/spacewalkcoverage/wsgi/xmlrpc.py" />





  <!-- ##### ADDITIONAL TASKS ##### -->

  <!-- Define the Cobertura instrument task -->
  <taskdef name="cobertura-instrument"
           classname="net.sourceforge.cobertura.ant.InstrumentTask" />


  

  
  <!-- ##### MAIN TARGETS ##### -->

  <target name="install" depends="symlink-var-dir,install-java,install-python" />

  <target name="uninstall" depends="uninstall-java,uninstall-python" />




  <!-- ##### JAVA-RELATED TARGETS ##### -->

  <target name="install-java" 
          depends="backup-original-rhn-jar,instrument-java,symlink-cobertura-to-tomcat"
          description="Does needed changes to setup the Java code for tests">

    <exec executable="${service.tomcat}">
      <arg value="stop" />
    </exec>

    <delete quiet="true">
      <fileset file="${rhn.jar.path}" />
    </delete>
    
    <symlink link="${rhn.jar.path}" resource="${rhn.jar.instr.path}" />

    <exec executable="${service.tomcat}">
      <arg value="start" />
    </exec>
  </target>

  <target name="uninstall-java"
          description="Rollbacks the changes done in install"
          depends="-check-original-rhn-jar"
          if="rhn.jar.original.present">
   
    <exec executable="${service.tomcat}">
      <arg value="stop" />
    </exec>
 
    <!-- Remove the symlink and instrumented jar -->
    <delete quiet="true">
      <fileset file="${rhn.jar.path}" />
      <fileset file="${rhn.jar.instr.path}" />
    </delete>

    <!-- Move the original jar back to its place -->
    <move file="${rhn.jar.original.path}" tofile="${rhn.jar.path}" />

    <exec executable="${service.tomcat}">
      <arg value="start" />
    </exec>
  </target>

  <target name="backup-original-rhn-jar"
          depends="-check-original-rhn-jar"
          unless="rhn.jar.original.present" >

    <copy file="${rhn.jar.path}" tofile="${rhn.jar.original.path}" />    
  </target>

  <target name="instrument-java" 
          description="Instruments the classes of unpacked rhn.jar"
          depends="-check-instrumented-rhn-jar"
          unless="rhn.jar.instr.present" >
    
    <delete quiet="true">
      <fileset file="${cobertura.datafile}" />
    </delete>

    <!-- Make temporary directory for unpacked jar -->
    <exec executable="mktemp" outputproperty="instrument.classes.dir">
      <arg value="-d" />
    </exec>

    <unjar src="${rhn.jar.original.path}" dest="${instrument.classes.dir}" />

    <cobertura-instrument todir="${instrument.classes.dir}" datafile="${cobertura.datafile.path}">
      <!-- NOTE: asm.jar and asm-tree.jar must be explicitly loaded as they 
                 are not in /etc/ant.d/cobertura -->
      <classpath location="/usr/share/java/objectweb-asm/asm.jar" />
      <classpath location="/usr/share/java/objectweb-asm/asm-tree.jar" />

      <fileset dir="${instrument.classes.dir}">
        <include name="**/*.class" />
      </fileset>
    </cobertura-instrument>

    <jar destfile="${rhn.jar.instr.path}" basedir="${instrument.classes.dir}" />

    <!-- Delete the temporary directory -->
    <delete quiet="true" includeemptydirs="true">
      <fileset dir="${instrument.classes.dir}" />
    </delete>

    <!-- Backup the empty datafile -->
    <copy file="${cobertura.datafile.path}"
          tofile="${cobertura.emptydatafile.path}"
          overwrite="true" />

    <!-- Remove possible previous cobertura data file ... -->
    <delete quiet="true">
      <fileset file="${cobertura.datafile.tomcat6.path}" />
    </delete>

    <!-- ... and symlink it to our var directory -->
    <symlink link="${cobertura.datafile.tomcat6.path}" resource="${cobertura.datafile.path}" />

    <!-- Finally set permissions for all to write -->
    <chmod perm="ugo+rw" file="${cobertura.datafile.path}" />
    <chmod perm="ugo+rw" file="${cobertura.emptydatafile.path}" />
  </target>

  <target name="symlink-cobertura-to-tomcat"
          description="Setups the Tomcat server to load Cobertura's jar"
          depends="-check-tomcat-cobertura-jar"
          unless="tomcat.cobertura.jar.present"> 
    <symlink link="/usr/share/java/tomcat6/cobertura.jar"
             resource="/usr/share/java/cobertura.jar"
             failonerror="false" />
  </target>



  
  <!-- ##### PYTHON-RELATED TARGETS -->

  <target name="install-python"
          depends="backup-python-wsgi-conf,readable-httpd-logs">
    <!-- Copy back the original conf file -->
    <copy file="${python.wsgi.conf.path}-backup" tofile="${python.wsgi.conf.path}" />

    <!-- Update the PythonPath line with python lib -->
    <exec executable="sed" output="${python.wsgi.conf.path}">
      <arg value='s|^\(.*WSGIPythonPath[^"]*"\)\([^"]*\)\(".*\)$|\1\2:${python.lib.path}\3|' />
      <arg value="${python.wsgi.conf.path}" />
    </exec>

    <!-- Update the ScriptAlias /XMLRPC line with our handler -->
    <exec executable="sed" output="${python.wsgi.conf.path}">
      <arg value='s|^\(.*WSGIScriptAlias.*/XMLRPC\).*$|\1 ${python.wsgi.xmlrpc.handler.path}|' />
      <arg value="${python.wsgi.conf.path}" />
    </exec>

    <!-- Restart Httpd server -->
    <exec executable="${service.httpd}">
      <arg value="restart" />
    </exec>
  </target>

  <target name="uninstall-python">
    <move file="${python.wsgi.conf.path}-backup"
          tofile="${python.wsgi.conf.path}"
          overwrite="true" />
  </target>

  <target name="backup-python-wsgi-conf"
          depends="-check-python-wsgi-conf-backup"
          unless="python.wsgi.conf.backup.present">
    <copy file="${python.wsgi.conf.path}" tofile="${python.wsgi.conf.path}-backup" />
  </target>

  <target name="readable-httpd-logs"
          description="Chmods the httpd log directory to be readable by all">
    
    <!-- Make readable the directory -->
    <chmod dir="/var/log/httpd" perm="ugo+rx" />

    <!-- As well as all files inside -->
    <chmod dir="/var/log/httpd" perm="ugo+r" includes="*" />
  </target>



  
  <!-- ##### HELPER TARGETS ##### -->

  <target name="symlink-var-dir"
          depends="-check-coverage-var-dir"
          unless="coverage.var.dir.present">
    <mkdir dir="/var/opt/spacewalk-xmlrpc-tests" />
    <symlink link="/var/opt/spacewalk-xmlrpc-tests/coverage" resource="${real.coverage.var.dir}" />
    <chmod dir="${real.coverage.var.dir}" perm="ugo+rw" />
  </target>

  <target name="-check-tomcat-cobertura-jar">
    <available file="/usr/share/java/tomcat6/cobertura.jar"
               property="tomcat.cobertura.jar.present" />
  </target>

  <target name="-check-instrumented-rhn-jar">
    <available file="${rhn.jar.instr.path}"
               property="rhn.jar.instr.present" />
  </target>

  <target name="-check-original-rhn-jar">
    <available file="${rhn.jar.original.path}"
               property="rhn.jar.original.present" />
  </target>

  <target name="-check-coverage-var-dir">
    <available file="/var/opt/spacewalk-xmlrpc-tests/coverage"
               property="coverage.var.dir.present" />
  </target>

  <target name="-check-python-wsgi-conf-backup">
    <available file="${python.wsgi.conf.path}-backup"
               property="python.wsgi.conf.backup.present" /> 
  </target>

</project>
